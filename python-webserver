# Simple Python Web Server #

A simple web server with conditional get.
To understand how it works, we must first talk a little bit about how web pages
work. Web pages are basically text files, written in a markup language called
HTML (HyperText Markup Language).
Type the following code on any text editor, save it as index.html
and open the file with your web browser.

```html
<!DOCTYPE html>
<html>
<head>
<h1>Hello world</h1>
</head>
<body>
<p>foo</p>
</body>
```
You should see something similar to this:

![hello-world-html](hello-world-html.png)

And that would suffice in the early days of the Internet when connections
were slow and computer resources were poor. Currently we have powerful browsers
(multithreaded applications with tens of millions of lines of code) and computers.
So instead of a single .html file, modern webpages usually have at least three
folders: `js, imgs, css`, organized in this manner:

```
/web
  ├───index.html
  ├───js
  |    └───.js files
  ├───imgs
  |    └───.jpeg, .png (etc) files
  └───css
       └───.css files
```

**javascript**

Javascript (.js) files are capable of amazing things such as animations, games
 and even backend functionalities.

 **css**

 Cascade Style Sheets are responsible for different fonts, background colors,
 text size, positioning and others. It is designed to make web pages look a
 little better.

 ** imgs **

 Keeps images and illustrations that might be shown on web sites.



```python
from socket import *
import os, time
from datetime import datetime as dt

# HTTP servers run on port 80
serverPort = 80

# create TCP welcoming socket
serverSocket = socket(AF_INET,SOCK_STREAM)
serverSocket.bind(("",serverPort))

# server begins listening for incoming TCP requests
serverSocket.listen(1)
# the following variables are going to have to be changed according to test env.:
path = ("/") # path to your web files goes here
cacheHeader = ("If-Modified-Since:")

fileList = os.listdir(path)
print(fileList)

# output to console that server is listening
print ("Magic happens on port 80... ")

while 1:
    connectionSocket, addr = serverSocket.accept()
    sentence = connectionSocket.recv(1024)
    print ("Received From Client: ", sentence)

    if(sentence[0:5]=="GET /"):
        print("user sent a GET\n")
        fileName = sentence[5:-2] # trim GET
        fileName = fileName.partition(" ")[0] # GET file name (index.html)
        print("fileName:", fileName)
    else:
        # rest of the code might be dependent on this
        print("Server rejected HTTP method")

    # compare this with the dir file list:
    if fileName in fileList:
        print("file found")

        # check for caching:
        if(cacheHeader in sentence):
            print("Page is cached, perform check:")
            # trim 'If-Modified-Since' date:
            cacheIndex = sentence.find(cacheHeader, 0, len(sentence))
            cacheDate = sentence[cacheIndex:]
            cacheDate = cacheDate[19:]
            cacheDate = cacheDate.partition(" GMT")[0]
            print("CacheDate: ", cacheDate)

            # element in list where file is at
            i = fileList.index(fileName)
            # full path with file name
            filePath = (path+fileList[i])
            # calculate last modified:
            (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(filePath)
            print("FileDate: ", time.ctime(mtime))

            # compare the two dates:
            # convert both strings back to time:
            # convCacheDate = datetime.strptime(cacheDate, "%c")
            a = dt.strptime(cacheDate, "%c")
            b = dt.strptime(time.ctime(mtime), "%c")
            if(b > a):
                print("Cache is outdated, resend!")
                # calculate last modified, send
                i = fileList.index(fileName)
                filePath = (path+fileList[i])
                (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(filePath)

                # send the file with Last-Modified header information:
                connectionSocket.send('HTTP/1.1 200 OK\nContent-Type: text/html\nLast-Modified: %s GMT\n\n' % time.ctime(mtime))

                webFile = open(path+fileList[i], 'rb')
                l = webFile.read(1024)
                print(l)
                while(l):
                    print 'Sending...'
                    connectionSocket.send(l)
                    l = webFile.read(1024)
                webFile.close()
            else:
                print("Cache is current, return 304")
                connectionSocket.send('HTTP/1.1 304\n')
        else:
            print("Page not cached, send anyway")
            # calculate last modified, send
            i = fileList.index(fileName)
            filePath = (path+fileList[i])
            (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(filePath)

            # send the file with Last-Modified header information:
            connectionSocket.send('HTTP/1.1 200 OK\nContent-Type: text/html\nLast-Modified: %s GMT\n\n' % time.ctime(mtime))

            webFile = open(path+fileList[i], 'rb')
            l = webFile.read(1024)
            print(l)
            while(l):
                print 'Sending...'
                connectionSocket.send(l)
                l = webFile.read(1024)
            webFile.close()
                # connectionSocket.shutdown(socket.SHUT_WR)
    else:
        print("file not found")
        # send a 404
        connectionSocket.send('\n404 Not Found\n');
        # connectionSocket.send('HTTP/1.1 404 Not Found\nContent-Type: text/html\n\n')

    # send the file
    # connectionSocket.send(sentence)

    # output to console the sentence sent back to the client
    # print ("Sent back to Client: ", capitalizedSentence)

    # close the TCP connection; the welcoming socket continues
    connectionSocket.close()


##########################################################################

```
